
AOP 面向切面编程 来自百度百科

    Aspect Oriented Programming(AOP)，面向切面编程，是一个比较热门的话题。AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对
的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。比如我们最常见的就是日志记录了，举个例子，我们现在提供一个服务
查询学生信息的，但是我们希望记录有谁进行了这个查询。如果按照传统的OOP的实现的话，那我们实现了一个查询学生信息的服务接口(StudentInfoService)
和其实现类（StudentInfoServiceImpl.java），同时为了要进行记录的话，那我们在实现类(StudentInfoServiceImpl.java)中要添加其实现记录的过程。
这样的话，假如我们要实现的服务有多个呢？那就要在每个实现的类都添加这些记录过程。这样做的话就会有点繁琐，而且每个实现类都与记录服务日志的行为
紧耦合，违反了面向对象的规则。那么怎样才能把记录服务的行为与业务处理过程中分离出来呢？看起来好像就是查询学生的服务自己在进行，但却是背后日志记录
对这些行为进行记录，并且查询学生的服务不知道存在这些记录过程，这就是我们要讨论AOP的目的所在。AOP的编程，好像就是把我们在某个方面的功能提出来与
一批对象进行隔离，这样与一批对象之间降低了耦合性，可以就某个功能进行编程。


Spring AOP 实现过程（以給四则运算添加日志为例）
如：
    public int add(int i, int j) {
        System.out.println("add start with " + i + " , " + j);
        int result = i + j;
        System.out.println("add ends with " + result);
        return result;
    }

其中：
    System.out.println 为日志切面
    System.out.println("add start with " + i + " , " + j); 为前置通知
    System.out.println("add ends with " + result); 为后置通知

1、需要的包

com.springsource.org.aopalliance.jar
com.springsource.org.aspectj.weaver.jar
spring-aop.jar
spring-aspects.jar

2、声明切面。

