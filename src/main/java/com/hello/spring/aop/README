
AOP 面向切面编程 来自百度百科

    Aspect Oriented Programming(AOP)，面向切面编程，是一个比较热门的话题。AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对
的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。比如我们最常见的就是日志记录了，举个例子，我们现在提供一个服务
查询学生信息的，但是我们希望记录有谁进行了这个查询。如果按照传统的OOP的实现的话，那我们实现了一个查询学生信息的服务接口(StudentInfoService)
和其实现类（StudentInfoServiceImpl.java），同时为了要进行记录的话，那我们在实现类(StudentInfoServiceImpl.java)中要添加其实现记录的过程。
这样的话，假如我们要实现的服务有多个呢？那就要在每个实现的类都添加这些记录过程。这样做的话就会有点繁琐，而且每个实现类都与记录服务日志的行为
紧耦合，违反了面向对象的规则。那么怎样才能把记录服务的行为与业务处理过程中分离出来呢？看起来好像就是查询学生的服务自己在进行，但却是背后日志记录
对这些行为进行记录，并且查询学生的服务不知道存在这些记录过程，这就是我们要讨论AOP的目的所在。AOP的编程，好像就是把我们在某个方面的功能提出来与
一批对象进行隔离，这样与一批对象之间降低了耦合性，可以就某个功能进行编程。


Spring AOP 实现过程
如：
     Object result = null;
     try {
         // 前置通知 @Before
         result = method.invoke(target, args);
         // 返回通知 @AfterReturning
     } catch (NullPointException e) {
         e.printStackTrace();
         // 异常通知 @AfterThrowing
     } catch (Exception e) {
         e.printStackTrace();
         // 异常通知 @AfterThrowing
     }

     // 后置通知

其中：
    System.out.println 为日志切面
    System.out.println("add start with " + i + " , " + j); 为前置通知
    System.out.println("add ends with " + result); 为后置通知

1、需要的包

spring-aop.jar
spring-aspects.jar

2、声明切面。@Aspect  LoggerAspect.java
说明：表明这个切面的作用，比如打印日志的切面、前置数据检查的切面

3、声明切点。
说明：定义程序在运行中，需要输出日志的位置。包含：
@Before：前置通知，在程序执行前，先执行的程序段
@After： 后置通知，在程序执行后，才执行的程序段（无论目标方法是否出现异常），不能获取目标方法的执行结果（return的内容）
@AfterReturning：返回通知，能获取程序段执行的结果，即（return的内容），如果出现异常，则不能执行到该方法
@AfterThrowing：异常通知，方法出异常的时候，执行的方法。通过异常的类型去匹配，比如：方法抛出NullPointException，但标记的时候，写的是RuntimeException，则执行不到（类似于多个catch的情况）
@Around：环绕通知，以上几种通知的集合。实例：

    @Around(value = "execution(* com.hello.spring.aop.impl.ArithmeticImpl.*(..))")
    public Object around(ProceedingJoinPoint point) {

        Object result = null;
        String methodName = point.getSignature().getName();

        try {
            // 前置通知
            System.out.println("The Method " + methodName + " begins with " + Arrays.asList(point.getArgs()));
            result = point.proceed();
            // 返回通知
            System.out.println("The Method " + methodName + " return " + result);
        } catch (Throwable e) {
            // 异常通知
            System.out.println("The Method " + methodName + " exception " + e);
            throw new RuntimeException(e);
        }

        // 后置通知
        System.out.println("The Method " + methodName + " ends");

        return result;

    }

4、切面执行的优先级。假设有LoggingAspect和CheckAspect两个切面：
则可以通过设置Order的方式，指定切面执行的顺序，Order的值越小，越先执行。

5、切点方法的重用

    // 声明
    @Pointcut("execution(public int com.hello.spring.aop.impl.ArithmeticImpl.*(..))")
    public void joinPointExpression() {

    }

    // 使用
    @Before("joinPointExpression()")
    public void beforeLogger(JoinPoint point) {

        String methodName = point.getSignature().getName();
        List<Object> args = Arrays.asList(point.getArgs());

        System.out.println("The Method " + methodName + " before, with" + args);

    }


